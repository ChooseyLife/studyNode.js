package.json

npm/cnpm
yarn
    npm i yarn -g
    yarn add xxx
    yarn remove xxx
bower - 前端包管理
    npm i bower -g
    bower i jquery

----------------------

系统包：
    1.assert-断言
    2.path-路径
    3.fs - 文件操作
    4.url - 网址
    5.querystring - 请求数据
    6.net

----------------------

net - 网络通信（不走http协议）

TCP - 主要用于文件传送

UDP - 主要用于视频直播

----------------------

OSI 七层参考模型
    物理层 > 数据链路层 > 网络层(IP) > 传输层(tcp) > 会话层 > 表现出 > 应用层

    现在使用的模型有五层模型
    物理层 > 数据链路层 > 网络层(IP) > 传输层(tcp) >  应用层(http)

----------------------

数据通信
    GET
    POST
        普通数据 - querystring
        文件数据 - Buffer(二进制数据)= > 使用multiparty模块
    POST文件处理(通过req.headers获取  WebKitFormBoundaryDzMIpMM3EnAXDTea)
        ------WebKitFormBoundaryDzMIpMM3EnAXDTea Content-Disposition: form-data; name
        111
        ------WebKitFormBoundaryDzMIpMM3EnAXDTea Content-Disposition: form-data; password
        222
        ------WebKitFormBoundaryDzMIpMM3EnAXDTea Content-Disposition: form-data; name="f1"; filename=""
        Content-Type: application/octet-stream
        ------WebKitFormBoundaryDzMIpMM3EnAXDTea

----------------------

数据通信
    ajax、跨域
    fetch
        读取
        解析
        ```
            async function (){
                let res = await fetch()
                let data = await res[读取格式]
            }
        ```
    Ajax2.0->FormData
        FormData

    WebSocket(ws、wss)
        性能高
        双向通信
            socket.io
                简单、方便
                兼容IE5
                自动数据解析
                    ```
                        server.js
                            // 监听http，建立ws
                            let wsServer = io.listen(server)
                            wsServer.on('connection', sock => {
                                // sock.emit('name', 数据) -> 发送数据
                                // sock.on('name', function(数据){})

                                sock.on('aaa', function(a,b){
                                    console.log(a,b)
                                })
                            })

                        html
                            // 引入socket.io.js
                            let sock = io.connect('ws://localhost:8080')
                            sock.emit('aaa',12,5)
                    ```
            原生websocket
                1.握手

                sec-key -> http 头部获得
                uuid => '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'
                base64(sha1(key + uuid)) => 返回res 
    ajax为什么不能跨域？
        浏览器的安全机制限制
    jsonp
        原理: 通过动态添加script，设置cb调用函数，后端传参到调用函数
        <script src="js文件"></script>

    ajax如何跨域 - origin、 access-control-allow-origin(后端设置origin)、还有其他8种

----------------------

数据库
    分类
        文件型: 简单 -> access、sqlite
        关系型：MySql、Oracle
        分布式：MongoDB
        NoSql：memcache、redis

    安全性
        注入

    操作
        管理性
        增删改查

----------------------

框架
    express
    koa
----------------------